//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceTester.MyService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyService.ISurveyService1")]
    public interface ISurveyService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISurveyService1/GetData", ReplyAction="http://tempuri.org/ISurveyService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISurveyService1/GetData", ReplyAction="http://tempuri.org/ISurveyService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISurveyService1/ServerHasSurveys", ReplyAction="http://tempuri.org/ISurveyService1/ServerHasSurveysResponse")]
        bool ServerHasSurveys();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISurveyService1/ServerHasSurveys", ReplyAction="http://tempuri.org/ISurveyService1/ServerHasSurveysResponse")]
        System.Threading.Tasks.Task<bool> ServerHasSurveysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISurveyService1/AddSurveyToServer", ReplyAction="http://tempuri.org/ISurveyService1/AddSurveyToServerResponse")]
        string AddSurveyToServer(string jsonInfoString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISurveyService1/AddSurveyToServer", ReplyAction="http://tempuri.org/ISurveyService1/AddSurveyToServerResponse")]
        System.Threading.Tasks.Task<string> AddSurveyToServerAsync(string jsonInfoString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISurveyService1/GetSurvey", ReplyAction="http://tempuri.org/ISurveyService1/GetSurveyResponse")]
        string GetSurvey(int surveyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISurveyService1/GetSurvey", ReplyAction="http://tempuri.org/ISurveyService1/GetSurveyResponse")]
        System.Threading.Tasks.Task<string> GetSurveyAsync(int surveyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISurveyService1/TestByCreatingADirectory", ReplyAction="http://tempuri.org/ISurveyService1/TestByCreatingADirectoryResponse")]
        string TestByCreatingADirectory(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISurveyService1/TestByCreatingADirectory", ReplyAction="http://tempuri.org/ISurveyService1/TestByCreatingADirectoryResponse")]
        System.Threading.Tasks.Task<string> TestByCreatingADirectoryAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISurveyService1Channel : ServiceTester.MyService.ISurveyService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SurveyService1Client : System.ServiceModel.ClientBase<ServiceTester.MyService.ISurveyService1>, ServiceTester.MyService.ISurveyService1 {
        
        public SurveyService1Client() {
        }
        
        public SurveyService1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SurveyService1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SurveyService1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SurveyService1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public bool ServerHasSurveys() {
            return base.Channel.ServerHasSurveys();
        }
        
        public System.Threading.Tasks.Task<bool> ServerHasSurveysAsync() {
            return base.Channel.ServerHasSurveysAsync();
        }
        
        public string AddSurveyToServer(string jsonInfoString) {
            return base.Channel.AddSurveyToServer(jsonInfoString);
        }
        
        public System.Threading.Tasks.Task<string> AddSurveyToServerAsync(string jsonInfoString) {
            return base.Channel.AddSurveyToServerAsync(jsonInfoString);
        }
        
        public string GetSurvey(int surveyId) {
            return base.Channel.GetSurvey(surveyId);
        }
        
        public System.Threading.Tasks.Task<string> GetSurveyAsync(int surveyId) {
            return base.Channel.GetSurveyAsync(surveyId);
        }
        
        public string TestByCreatingADirectory(string name) {
            return base.Channel.TestByCreatingADirectory(name);
        }
        
        public System.Threading.Tasks.Task<string> TestByCreatingADirectoryAsync(string name) {
            return base.Channel.TestByCreatingADirectoryAsync(name);
        }
    }
}
